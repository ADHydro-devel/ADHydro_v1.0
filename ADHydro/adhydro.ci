/*
 Copyright 2015 University of Wyoming

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

mainmodule adhydro
{
  extern module file_manager;
  extern module mesh_element;
  extern module channel_element;
  
  mainchare [migratable] ADHydro
  {
    readonly bool   appendToInputFiles;
    readonly bool   drainDownMode;
    readonly double drainDownTime;
    readonly bool   doMeshMassage;
    readonly int    verbosityLevel;
    
    initproc void setLoadBalancingToManual();
    entry ADHydro(CkArgMsg* msg);
    entry [reductiontarget] void fileManagerInitialized();
    entry [reductiontarget] void writeFiles();
    entry [reductiontarget] void checkForcingData();
    
    entry void waitForForcingDataToFinish()
    {
      when meshForcingDataDone(), channelForcingDataDone()
      {
        serial
        {
          forcingDataDone();
        }
      }
    };
    
    entry [reductiontarget] void meshForcingDataDone();
    entry [reductiontarget] void channelForcingDataDone();
    
    entry void waitForInvariantToFinish()
    {
      when meshInvariantDone(), channelInvariantDone()
      {
        serial
        {
          doTimestep();
        }
      }
    };
    
    entry [reductiontarget] void meshInvariantDone();
    entry [reductiontarget] void channelInvariantDone();
    
    entry void waitForTimestepToFinish()
    {
      when meshTimestepDone(double dtNewMesh), channelTimestepDone(double dtNewChannel)
      {
        serial
        {
          timestepDone((dtNewMesh < dtNewChannel) ? dtNewMesh : dtNewChannel);
        }
      }
    };
    
    entry [reductiontarget] void meshTimestepDone(double dtNewMesh);
    entry [reductiontarget] void channelTimestepDone(double dtNewChannel);
  }; // End mainchare [migratable] ADHydro.
}; // End mainmodule adhydro.
